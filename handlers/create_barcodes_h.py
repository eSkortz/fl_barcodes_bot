from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, FSInputFile, Message
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
import os

from keyboards import only_to_main_k, create_barcodes_k
from handlers.main_h import sth_error
from config import BOT_TOKEN
from utils.func_utils import generate_codes, save_codes_to_docx
from utils.api_utils import create_codes


router = Router()
bot = Bot(token=BOT_TOKEN)


class CreateBarcodes(StatesGroup):
    waiting_to_amount = State()
    waiting_to_list = State()


@router.callback_query(F.data == "create_barcodes_menu")
async def generate(callback: CallbackQuery) -> None:
    try:
        markup_inline = create_barcodes_k.get()
        await callback.message.delete()
        await callback.message.answer(
            text=(
                "üîé –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é.\n\n"
                + "–í —Å–ª—É—á–∞–µ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏ 'üé≤ –°–æ–∑–¥–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–¥—ã' - "
                + "–≤–∞–º –±—É–¥–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞—Ç—å –∏—Ö –∫–æ–ª-–≤–æ, —Å–∞–º–∏ –∫–æ–¥—ã "
                + "–±—É–¥—É—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —Ä–∞–Ω–¥–æ–º–Ω–æ —Å –ø–æ–º–æ—â—å—é –∞–ª–≥–æ—Ä–∏—Ç–º–∞\n\n"
                + "–í —Å–ª—É—á–∞–µ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏ 'üìù –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–æ–¥—ã' - –≤—ã –¥–æ–ª–∂–Ω—ã –±—É–¥–µ—Ç–µ "
                + "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–¥—ã, —Ä–∞–∑–¥–µ–ª–∏–≤ –∏—Ö –∑–∞–ø—è—Ç–æ–π.\n\n"
                + "–í –æ—Ç–≤–µ—Ç –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å docx-—Ñ–∞–π–ª–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤–∞–º–∏ –∫–æ–¥—ã"
            ),
            reply_markup=markup_inline,
        )
    except Exception as exception:
        await sth_error(callback.message, exception)


@router.callback_query(F.data == "create_random_barcodes")
async def generate(callback: CallbackQuery, state: FSMContext) -> None:
    try:
        await callback.message.delete()
        markup_inline = only_to_main_k.get()
        message = await callback.message.answer(
            text="üõé –ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –∫–æ–ª-–≤–æ String Art –∫–æ–¥–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å",
            reply_markup=markup_inline
        )
        await state.set_state(CreateBarcodes.waiting_to_amount)
        await state.update_data(id_to_delete=message.message_id)
    except Exception as exception:
        await sth_error(callback.message, exception)


@router.message(CreateBarcodes.waiting_to_amount)
async def waiting_to_message(message: Message, state: FSMContext) -> None:
    try:
        message_text = message.text
        state_data = await state.get_data()
        id_to_delete = state_data["id_to_delete"]
        await bot.delete_message(chat_id=message.chat.id, message_id=id_to_delete)
        await message.delete()

        try:
            int(message_text)
        except Exception:
            markup_inline = only_to_main_k.get()
            await message.answer(
                text="‚õîÔ∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
                reply_markup=markup_inline,
            )
        else:
            count = int(message_text)
            codes = generate_codes(count)
            await create_codes(codes=codes)
            filename = save_codes_to_docx(codes, message.chat.id)

            docx_file = FSInputFile(f"{filename}")
            markup_inline = only_to_main_k.get()
            await message.answer_document(
                document=docx_file, reply_markup=markup_inline
            )
            os.remove(f"{filename}")

    except Exception as exception:
        await sth_error(message, exception)


@router.callback_query(F.data == "create_barcodes_by_list")
async def generate(callback: CallbackQuery, state: FSMContext) -> None:
    try:
        await callback.message.delete()
        markup_inline = only_to_main_k.get()
        message = await callback.message.answer(
            text="üõé –ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ String Art –∫–æ–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é",
            reply_markup=markup_inline
        )
        await state.set_state(CreateBarcodes.waiting_to_list)
        await state.update_data(id_to_delete=message.message_id)
    except Exception as exception:
        await sth_error(callback.message, exception)


@router.message(CreateBarcodes.waiting_to_list)
async def waiting_to_message(message: Message, state: FSMContext) -> None:
    try:
        message_text = message.text
        state_data = await state.get_data()
        id_to_delete = state_data["id_to_delete"]
        await bot.delete_message(chat_id=message.chat.id, message_id=id_to_delete)
        await message.delete()

        try:
            message_text = message_text.replace(" ", "")
            codes = message_text.split(",")
            for code in codes:
                if len(code) != 8:
                    raise ValueError
        except Exception:
            markup_inline = only_to_main_k.get()
            await message.answer(
                text="‚õîÔ∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
                reply_markup=markup_inline,
            )
        else:
            await create_codes(codes=codes)
            filename = save_codes_to_docx(codes, message.chat.id)

            docx_file = FSInputFile(f"{filename}")
            markup_inline = only_to_main_k.get()
            await message.answer_document(
                document=docx_file, reply_markup=markup_inline
            )
            os.remove(f"{filename}")

    except Exception as exception:
        await sth_error(message, exception)
